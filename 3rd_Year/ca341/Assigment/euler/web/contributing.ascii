= Contributing
:author: Stephen Blott"
:email: stephen.blott@dcu.ie
:toc: left
:toc-title: Contents
:toc-levels: 4

****
Contributions of markers for new _Euler_ problems are _very welcome_.

This project is hosted on GitLab, here: https://gitlab.computing.dcu.ie/sblott/euler[].
****

// //////////////////////////////////////////////////////////////
== Contributing new markers

.To contribute a new marker/problem...
****
. fork the GitLab project above (https://gitlab.computing.dcu.ie/sblott/euler[same link again])
. clone your new repo
. create a git branch for your contribution
. write your marker:
** copy an existing marker (see the `problems` directory in the repo)
** there's information on how to write _Einstein_ markers below and link:/einstein/help#_markers[here]
// ** ask SB if you need help
// . submit a merge request (MR) on GitLab +
//   (https://slack.computing.dcu.ie/[Slack] or email SB too, otherwise I might not see your MR).
****

// //////////////////////////////////////////////////////////////
== Writing markers

.Writing _Einstein_ markers...
****
The absolute minimum for a new task/marker is:

- an exemplar +
  this is your own solution for the problem
- `stdout.txt` +
  the expected output
- `task-description.ascii` +
  a description of the task with example command line arguments, input, output, and so on +
  the format is https://asciidoctor.org/[asciidoc]; asciidoc is like markdown, but all grown up
****

****
For input, you can:

- write a "runner" script (like
  https://gitlab.computing.dcu.ie/sblott/euler/-/blob/main/problems/euler-1-multiples-of-3-or-5.py/runner.zsh[this one]),
- use command-line arguments (filename: `argv.txt`), or
- use standard input (filename: `stdin.txt`).

Look at the existing markers to get ideas as to what might work best for your task.
****

// //////////////////////////////////////////////////////////////
== Other languages

****
You can choose python, if that's your preference; but you don't have to.

You can choose any language support by _Einstein_:

- C, C\++, python, perl, Prolog, Haskell, Java, JavaScript, R (Rscript), ...
- and some scripting languages which are less likely to be of interest here: +
  shell, zsh, awk, sed, ...

Adding languages is usually pretty straightforward.  Ask SB if you'd like
to try a language not listed above.

You would need to know:

1. how to install the interpreter or compilation system on Debian, and
2. how you want the interpreter or compiler called by default.
****

****
Moreover, you can contribute additional solutions to problems for which
markers already exist, just using a different programming language.

For example, this marker exists:

 euler-1-multiples-of-3-or-5.py

but perhaps you might contribute

 euler-1-multiples-of-3-or-5.c

or

 euler-1-multiples-of-3-or-5.r
****

****
When naming new tasks:

- if there is an existing implementation of your task in a different
  programming language, then you should copy the name used for that task,
- otherwise, you should follow the style used in the naming of existing
  tasks,
- prefer to use hyphens as separators, use underscores only if hyphens
  won't work for your programming language (e.g. Java doesn't like
  hyphens).
****

// //////////////////////////////////////////////////////////////
== Continuous integration (CI)

****
CI on GitLab is configured to run and test all markers.

The execution environment for the CI tests is similar to the _Einstein_
execution environment, but not identical.

Let me (SB) know if you encounter any unexplained issues.
****

****
You can run the test locally for just your own task/marker by running the
following command _in the root directory_ of your task...
****

----
$ zsh ../../bin/runner
----

****
In addition, the same script can be used to _actually generate_ the
`stdout.txt` files for your tasks, like this...
****

----
$ ../../bin/runner -a
----

// //////////////////////////////////////////////////////////////
== Acknowledgement

.GitHub
****
This GitLab project is mirrored automatically to GitHub,
https://github.com/smblott-github/euler[here].

Your contributions will be publicly visible, and you might link to them in
your CV, for example.

Optionally, include your name at the bottom of your task description.
****

// //////////////////////////////////////////////////////////////
//
include::misc/instrument.txt[]
include::misc/asciimath.txt[]

////
vim: ft=asciidoc
////
